name: update_infrastructure_and_deploy_app
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - dev

env:
  IMAGE_NAME: car_platform_api
  ECR_REPOSITORY_NAME: car_platform_repository

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    defaults:
      run:
        working-directory: infrastructure/terraform
    if: ${{ github.event.workflow_run.conclusion == 'success' }} ||¬†${{ github.event_name == 'pull_request' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
      # terraform_version: 0.13.0
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Build ARN of the latest image 
      id: getImageARN
      run: |
        LAST_TAG=$(aws ecr describe-images --repository-name $ECR_REPOSITORY_NAME --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]' --output text)
        IMAGE_ARN="${{ secrets.AWS_ECR_CAR_PLATFORM_ARN }}:$NEW_TAG"
        echo ::set-output name=IMAGE_ARN::$IMAGE_ARN

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform init
      id: init
      run: terraform init
      env:
        TF_WORKSPACE : preprod
      continue-on-error: true

    # Push on main (apply modif on prod)
    - name: Terraform select workspace
      if: github.ref == 'refs/heads/main'
      run: terraform workspace select prod

    # Push on dev (apply modif on preprod)
    - name: Terraform select workspace
      if: github.ref == 'refs/heads/dev'
      run: terraform workspace select preprod
    
    # PR from feature to dev (must plan on preprod env)
    - name: Terraform select workspace
      if: startsWith(github.event.pull_request.head.ref, 'feature/')
      run: terraform workspace select preprod

    # PR from dev to main (must plan on prod env)
    - name: Terraform select workspace
      if: github.event.pull_request.head.ref == 'dev' && github.event.pull_request.base.ref == 'main'
      run: terraform workspace select prod

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    # In case of PR , we plan to check if the prod or preprod is ready to accepts new modifs
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true

    # Github action bot comment PR 
    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format, Workspace and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    # Apply modif when PR is closed or when push directly on main
    - name: Terraform Apply (prod)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
    
    # Apply modif when PR is closed on when push directly on dev
    - name: Terraform Apply (preprod)
      if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

    

    

    
